{"version":3,"sources":["context/GlobalState.js","components/IncomeExpenses.js","components/TransactionList.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["initialState","transactions","createContext","makeStyles","theme","container","padding","spacing","marginBottom","backgroundColor","palette","grey","borderRadius","shape","grid","borderRight","divider","income","color","success","main","expense","error","list","height","overflowX","listItem","margin","expenseListItem","red","incomeListItem","green","submit","errorAlert","border","light","moneyType","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"6NAKMA,G,wBAAe,CACnBC,aAAc,KAKaC,wBAAcF,G,iCCFzBG,aAAW,SAAAC,GAAK,MAAK,CACrCC,UAAW,CACTC,QAASF,EAAMG,QAAQ,EAAG,GAC1BC,aAAcJ,EAAMG,QAAQ,GAC5BE,gBAAiBL,EAAMM,QAAQC,KAAK,KACpCC,aAAcR,EAAMS,MAAMD,cAE5BE,KAAM,CACJC,YAAY,aAAD,OAAeX,EAAMM,QAAQM,UAE1CC,OAAQ,CACNC,MAAOd,EAAMM,QAAQS,QAAQC,MAE/BC,QAAS,CACPH,MAAOd,EAAMM,QAAQY,MAAMF,U,4DCRbjB,aAAW,SAAAC,GAAK,MAAK,CACrCmB,KAAM,CACJC,OAAQ,QACRlB,QAASF,EAAMG,QAAQ,EAAG,GAC1BC,aAAcJ,EAAMG,QAAQ,GAC5BkB,UAAW,OACXhB,gBAAiBL,EAAMM,QAAQC,KAAK,KACpCC,aAAcR,EAAMS,MAAMD,cAE5Bc,SAAU,CACRC,OAAQvB,EAAMG,QAAQ,EAAG,GACzBE,gBAAiBL,EAAMM,QAAQC,KAAK,IACpCC,aAAcR,EAAMS,MAAMD,cAE5BgB,gBAAiB,CACfV,MAAOW,IAAI,MAEbC,eAAgB,CACdZ,MAAOa,IAAM,U,8DChBC5B,aAAW,SAAAC,GAAK,MAAK,CACrC4B,OAAQ,CACNL,OAAQvB,EAAMG,QAAQ,EAAG,EAAG,IAE9B0B,WAAY,CACV3B,QAASF,EAAMG,QAAQ,GACvBoB,OAAQvB,EAAMG,QAAQ,EAAG,GACzB2B,OAAO,aAAD,OAAe9B,EAAMM,QAAQY,MAAMa,OACzCvB,aAAcR,EAAMS,MAAMD,aAC1BM,MAAOd,EAAMM,QAAQY,MAAMF,MAE7BgB,UAAW,CACT9B,QAASF,EAAMG,QAAQ,EAAG,aCff,SAAS8B,KCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAACP,EAAD,MAASQ,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,c","file":"static/js/main.2092dbb7.chunk.js","sourcesContent":["import React, { createContext, useReducer } from 'react'\r\nimport AppReducer from './AppReducer'\r\n\r\n// This section would come from a database\r\n// If an API is setup for the project\r\nconst initialState = {\r\n  transactions: []\r\n}\r\n\r\n// The global context becomes a single source of truth\r\n// Any child element can grab states from it\r\nexport const GlobalContext = createContext(initialState)\r\n  \r\n// The global provider gives children elements access to \r\n// the global context\r\nexport const GlobalProvider = ({ children }) => {\r\n  // A reducer function enables the consumption and modification of states\r\n  const [state, dispatch] = useReducer(AppReducer, initialState)\r\n\r\n  // The dispatch functions are passed to the global provider\r\n  // This way they can be called from any element\r\n  function deleteTransaction(id) {\r\n    dispatch({\r\n      type: 'DELETE_TRANSACTION',\r\n      payload: id\r\n    })\r\n  }\r\n\r\n  // The 'type' is a convention to identify the function\r\n  // in a switch statement. The payload is optional for dispatch\r\n  function addTransaction(item) {\r\n    dispatch({\r\n      type: 'ADD_TRANSACTION',\r\n      payload: item\r\n    })\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider value={{\r\n      transactions: state.transactions,\r\n      deleteTransaction,\r\n      addTransaction\r\n    }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  )\r\n}","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nimport {\r\n  Typography,\r\n  Grid,\r\n  Container,\r\n  makeStyles\r\n} from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    padding: theme.spacing(2, 0),\r\n    marginBottom: theme.spacing(2),\r\n    backgroundColor: theme.palette.grey[100],\r\n    borderRadius: theme.shape.borderRadius,\r\n  },\r\n  grid: {\r\n    borderRight: `1px solid ${theme.palette.divider}`,\r\n  },\r\n  income: {\r\n    color: theme.palette.success.main,\r\n  },\r\n  expense: {\r\n    color: theme.palette.error.main,\r\n  },\r\n}))\r\n\r\nexport default function IncomeExpenses() {\r\n  const classes = useStyles()\r\n  const { transactions } = useContext(GlobalContext)\r\n  // Create a new array only containing the numeric values\r\n  const amounts = transactions.map(item => item.amount)\r\n\r\n  // Sum up the positive values\r\n  const income = amounts\r\n    .filter(item => item > 0)\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2)\r\n  \r\n  // Sum up the negative values\r\n  const expense = (amounts\r\n    .filter(item => item < 0)\r\n    .reduce((acc, item) => (acc += item), 0) * -1)\r\n    .toFixed(2)\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\" className={classes.container}>\r\n      <Grid container alignItems='center'>\r\n        <Grid item xs={6} className={classes.grid}>\r\n          <Typography variant=\"h6\" align='center' gutterBottom>\r\n            Income\r\n          </Typography>\r\n          <Typography align='center' variant=\"body1\" className={classes.income}>\r\n            +${income}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Typography variant=\"h6\" align='center' gutterBottom>\r\n            Expenses\r\n          </Typography>\r\n          <Typography align='center' variant=\"body1\" className={classes.expense}>\r\n            -${expense}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nimport {\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  IconButton,\r\n  Grid,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport { green, red } from '@material-ui/core/colors'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  list: {\r\n    height: '225px',\r\n    padding: theme.spacing(0, 1),\r\n    marginBottom: theme.spacing(2),\r\n    overflowX: 'auto',\r\n    backgroundColor: theme.palette.grey[200],\r\n    borderRadius: theme.shape.borderRadius,\r\n  },\r\n  listItem: {\r\n    margin: theme.spacing(1, 0),\r\n    backgroundColor: theme.palette.grey[50],\r\n    borderRadius: theme.shape.borderRadius,\r\n  },\r\n  expenseListItem: {\r\n    color: red[600],\r\n  },\r\n  incomeListItem: {\r\n    color: green[600],\r\n  },\r\n}))\r\n\r\nexport default function TransactionList() {\r\n  const classes = useStyles()\r\n  const { transactions, deleteTransaction } = useContext(GlobalContext)\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        History\r\n      </Typography>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <List dense component=\"nav\" className={classes.list}>\r\n            {/* Generate all the list items from the GlobalContext */}\r\n            {transactions.map(item => (\r\n              <ListItem key={item.id} className={classes.listItem}>\r\n                <ListItemText\r\n                  primary={item.text}\r\n                  classes={{ secondary: item.type === '+' ? classes.incomeListItem : classes.expenseListItem }}\r\n                  secondary={`${item.type}$${Math.abs(item.amount).toFixed(2)}`}\r\n                />\r\n                {/* Delete button */}\r\n                <ListItemSecondaryAction>\r\n                  <IconButton onClick={() => deleteTransaction(item.id)} edge=\"end\">\r\n                    <DeleteIcon />\r\n                  </IconButton>\r\n                </ListItemSecondaryAction>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport { GlobalContext } from '../context/GlobalState'\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Typography,\r\n  Grid,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Box,\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel\r\n} from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  submit: {\r\n    margin: theme.spacing(2, 0, 1),\r\n  },\r\n  errorAlert: {\r\n    padding: theme.spacing(1),\r\n    margin: theme.spacing(1, 0),\r\n    border: `2px solid ${theme.palette.error.light}`,\r\n    borderRadius: theme.shape.borderRadius,\r\n    color: theme.palette.error.main,\r\n  },\r\n  moneyType: {\r\n    padding: theme.spacing(0, 'auto')\r\n  },\r\n}))\r\n\r\nexport default function AddTransaction() {\r\n  const classes = useStyles()\r\n  // Use react-hook-form to simplify forms\r\n  const { register, handleSubmit, errors, control } = useForm()\r\n  const { addTransaction } = useContext(GlobalContext)\r\n\r\n  function onSubmit(data) {\r\n    // data contains the use input\r\n    const newTransaction = {\r\n      // Generate a random id to comply with React's mapping\r\n      // This can be improved using UUID\r\n      id: Math.floor(Math.random() * 100000000),\r\n      text: data.text,\r\n      // Depending on Income or Expense, make number positive or negative\r\n      // Remeber all user input is returned as a string regardless of the HTML\r\n      amount: data.type === '+' ? +data.amount : (data.amount * -1),\r\n      type: data.type\r\n    }\r\n    addTransaction(newTransaction)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        New transaction\r\n      </Typography>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              name=\"text\"\r\n              label=\"Name\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              fullWidth\r\n              inputRef={register({ required: true })}\r\n            />\r\n            {/* The Alert component should be used once it enters the stable release. */}\r\n            {errors.text && <Box className={classes.errorAlert}>The expense's name is required.</Box>}\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <FormControl fullWidth variant=\"outlined\" size=\"small\">\r\n              <InputLabel>Type</InputLabel>\r\n              {/* The controller element is provided by react-hook-form */}\r\n              {/* It accomodates special input fields like this one. */}\r\n              <Controller\r\n                as={Select}\r\n                name=\"type\"\r\n                label=\"Type\"\r\n                control={control}\r\n                defaultValue=\"+\"\r\n              >\r\n                <MenuItem value={'+'}>Income</MenuItem>\r\n                <MenuItem value={'-'}>Expense</MenuItem>\r\n              </Controller>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={8}>\r\n            <TextField\r\n              name=\"amount\"\r\n              fullWidth\r\n              inputMode=\"decimal\"\r\n              label=\"Amount\"\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    $\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              inputRef={register({\r\n                required: true,\r\n                // This regex allows for currency numbers 12.99\r\n                pattern: /^[0-9]+(\\.[0-9]{1,2})?$/\r\n              })}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n            {errors.amount && errors.amount.type === \"pattern\" && <Box className={classes.errorAlert}>Only insert digits, 0 through 9.</Box>}\r\n            {errors.amount && errors.amount.type === \"required\" && <Box className={classes.errorAlert}>The amount is required.</Box>}\r\n          </Grid>\r\n        </Grid>\r\n        <Button\r\n          type=\"submit\"\r\n          fullWidth\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={classes.submit}\r\n        >\r\n          Add transaction\r\n        </Button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Balance from './components/Balance'\r\nimport IncomeExpenses from './components/IncomeExpenses'\r\nimport TransactionList from './components/TransactionList'\r\nimport AddTransaction from './components/AddTransaction'\r\nimport { GlobalProvider } from './context/GlobalState'\r\nimport { Container } from '@material-ui/core';\r\n\r\nconst containerStyles = {\r\n  marginTop: '15px',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    // GlobalProvider becomes <div id=\"root\">\r\n    <GlobalProvider>\r\n      <Container\r\n        component=\"main\"\r\n        maxWidth=\"xs\"\r\n        style={containerStyles}\r\n      >\r\n        <Balance />\r\n        <IncomeExpenses />\r\n        <TransactionList />\r\n        <AddTransaction />\r\n      </Container>\r\n    </GlobalProvider>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render( <App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}